const { app, BrowserWindow, ipcMain, Menu, dialog } = require('electron');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

// Services
const ipcHandlers = require('./ipcHandlers');
const SchedulerService = require('./scheduler');
const NotificationService = require('./notifier');
const ReportsService = require('./reports');
const BiometricBridge = require('./biometric-bridge');

// Global services
let scheduler = null;
let notifier = null;
let reports = null;
let biometric = null;

function createMenu(mainWindow) {
  const template = [
    {
      label: 'File',
      submenu: [
        {
          label: 'New Member',
          accelerator: 'CmdOrCtrl+N',
          click: () => {
            mainWindow.webContents.send('menu-action', 'new-member');
          }
        },
        { type: 'separator' },
        {
          label: 'Backup Database',
          click: async () => {
            if (scheduler) {
              try {
                const result = await scheduler.triggerBackup();
                dialog.showMessageBox(mainWindow, {
                  type: 'info',
                  title: 'Backup Complete',
                  message: `Database backup created successfully at:\n${result}`
                });
              } catch (error) {
                dialog.showErrorBox('Backup Failed', error.message);
              }
            }
          }
        },
        {
          label: 'Restore Database',
          click: async () => {
            const result = await dialog.showOpenDialog(mainWindow, {
              properties: ['openFile'],
              filters: [
                { name: 'Database Files', extensions: ['db'] }
              ]
            });

            if (!result.canceled && result.filePaths[0]) {
              const response = await dialog.showMessageBox(mainWindow, {
                type: 'warning',
                buttons: ['Yes', 'Cancel'],
                defaultId: 1,
                message: 'Restore Database',
                detail: 'This will replace the current database. Are you sure?'
              });

              if (response.response === 0) {
                try {
                  const backupPath = result.filePaths[0];
                  const currentDbPath = path.join(__dirname, 'library.db');
                  fs.copyFileSync(backupPath, currentDbPath);
                  
                  dialog.showMessageBox(mainWindow, {
                    type: 'info',
                    title: 'Restore Complete',
                    message: 'Database restored successfully. Please restart the application.'
                  });
                } catch (error) {
                  dialog.showErrorBox('Restore Failed', error.message);
                }
              }
            }
          }
        },
        { type: 'separator' },
        {
          label: 'Exit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'Tools',
      submenu: [
        {
          label: 'Send Expiry Reminders',
          click: async () => {
            if (notifier) {
              try {
                const results = await notifier.sendBulkExpiryReminders();
                dialog.showMessageBox(mainWindow, {
                  type: 'info',
                  title: 'Reminders Sent',
                  message: `Expiry reminders sent to ${results.length} members`
                });
              } catch (error) {
                dialog.showErrorBox('Reminder Failed', error.message);
              }
            }
          }
        },
        {
          label: 'Test Biometric Connection',
          click: async () => {
            if (biometric) {
              try {
                const result = await biometric.testConnection();
                dialog.showMessageBox(mainWindow, {
                  type: result.success ? 'info' : 'warning',
                  title: 'Biometric Test',
                  message: result.message,
                  detail: result.details || ''
                });
              } catch (error) {
                dialog.showErrorBox('Test Failed', error.message);
              }
            }
          }
        },
        { type: 'separator' },
        {
          label: 'Settings',
          accelerator: 'CmdOrCtrl+,',
          click: () => {
            mainWindow.webContents.send('menu-action', 'settings');
          }
        }
      ]
    },
    {
      label: 'Reports',
      submenu: [
        {
          label: 'Attendance Report',
          click: () => {
            mainWindow.webContents.send('menu-action', 'attendance-report');
          }
        },
        {
          label: 'Payment Report',
          click: () => {
            mainWindow.webContents.send('menu-action', 'payment-report');
          }
        },
        {
          label: 'Members Report',
          click: () => {
            mainWindow.webContents.send('menu-action', 'members-report');
          }
        }
      ]
    },
    {
      label: 'Help',
      submenu: [
        {
          label: 'About',
          click: () => {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: 'About Library Management System',
              message: 'Library Management System v1.0.0',
              detail: 'Electron-based library management system with biometric attendance, payment tracking, and automated notifications.'
            });
          }
        }
      ]
    }
  ];

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

  // Variable to keep a global reference of the window object
let mainWindow;

const createWindow = async () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'),
    },
    // Open DevTools in development
    ...(isDev && { webSecurity: false }),
    show: false // Don't show until ready
  });

  // Create application menu
  createMenu(mainWindow);

  // Register IPC handlers
  registerIpcHandlers();

  // Initialize all services
  try {
    console.log('Initializing database...');
    db.init();
    
    console.log('Initializing notifier...');
    await notifier.init();
    
    console.log('Starting scheduler...');
    scheduler.start();
    
    console.log('All services initialized successfully');
  } catch (error) {
    console.error('Error initializing services:', error);
  }

  // Load the app
  if (isDev) {
    console.log('Loading from development server: http://localhost:5173/');
    try {
      await mainWindow.loadURL('http://localhost:5173/');
      console.log('Successfully loaded from development server');
    } catch (error) {
      console.error('Failed to load from development server:', error);
      // Try to load a fallback page
      mainWindow.loadFile(path.join(__dirname, '../index.html'));
    }
    // Open DevTools in development
    mainWindow.webContents.openDevTools();
  } else {
    console.log('Loading from file:', path.join(__dirname, '../dist/index.html'));
    mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));
  }

  // Add keyboard shortcuts
  mainWindow.webContents.on('before-input-event', (event, input) => {
    if (input.control && input.shift && input.key.toLowerCase() === 'i') {
      mainWindow.webContents.toggleDevTools();
    }
    if (input.control && input.key.toLowerCase() === 'r') {
      mainWindow.webContents.reload();
    }
  });

  // Show window when ready
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
  });

  return mainWindow;
};// Additional IPC handlers for services
function setupServiceHandlers() {
  // Notification service handlers
  ipcMain.handle('notification:send-expiry-reminders', async () => {
    try {
      const results = await notifier.sendBulkExpiryReminders();
      return { success: true, data: results };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('notification:send-welcome', async (event, memberData) => {
    try {
      const results = await notifier.sendWelcomeMessage(memberData);
      return { success: true, data: results };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  // Reports service handlers
  ipcMain.handle('report:export-attendance', async (event, { dateFrom, dateTo, format }) => {
    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const fileName = `attendance-report-${timestamp}.${format}`;
      const outputPath = path.join(__dirname, '../exports', fileName);

      // Ensure exports directory exists
      const exportsDir = path.dirname(outputPath);
      if (!fs.existsSync(exportsDir)) {
        fs.mkdirSync(exportsDir, { recursive: true });
      }

      if (format === 'xlsx') {
        const result = await reports.generateAttendanceReportExcel(dateFrom, dateTo, outputPath);
        return result;
      } else if (format === 'pdf') {
        const result = await reports.generateSummaryReportPdf(dateFrom, dateTo, outputPath);
        return result;
      }

      return { success: false, error: 'Unsupported format' };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('report:export-payments', async (event, { dateFrom, dateTo, format }) => {
    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const fileName = `payments-report-${timestamp}.${format}`;
      const outputPath = path.join(__dirname, '../exports', fileName);

      // Ensure exports directory exists
      const exportsDir = path.dirname(outputPath);
      if (!fs.existsSync(exportsDir)) {
        fs.mkdirSync(exportsDir, { recursive: true });
      }

      const result = await reports.generatePaymentsReportExcel(dateFrom, dateTo, outputPath);
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('report:export-members', async (event, { format }) => {
    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const fileName = `members-report-${timestamp}.${format}`;
      const outputPath = path.join(__dirname, '../exports', fileName);

      // Ensure exports directory exists
      const exportsDir = path.dirname(outputPath);
      if (!fs.existsSync(exportsDir)) {
        fs.mkdirSync(exportsDir, { recursive: true });
      }

      const result = await reports.generateMembersReportExcel(outputPath);
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('report:generate-receipt', async (event, { paymentId }) => {
    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const fileName = `receipt-${paymentId}-${timestamp}.pdf`;
      const outputPath = path.join(__dirname, '../exports/receipts', fileName);

      // Ensure receipts directory exists
      const receiptsDir = path.dirname(outputPath);
      if (!fs.existsSync(receiptsDir)) {
        fs.mkdirSync(receiptsDir, { recursive: true });
      }

      const result = await reports.generatePaymentReceiptPdf(paymentId, outputPath);
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  // Biometric service handlers
  ipcMain.handle('biometric:status', async () => {
    try {
      const result = await biometric.checkHelperStatus();
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('biometric:start-scan', async () => {
    try {
      const result = await biometric.startScanning();
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('biometric:stop-scan', async () => {
    try {
      const result = await biometric.stopScanning();
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('biometric:enroll', async (event, { memberId }) => {
    try {
      const result = await biometric.enrollFingerprint(memberId);
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('biometric:delete', async (event, { memberId }) => {
    try {
      const result = await biometric.deleteFingerprint(memberId);
      return result;
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  // Scheduler service handlers
  ipcMain.handle('scheduler:status', async () => {
    try {
      const status = scheduler.getStatus();
      return { success: true, data: status };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('scheduler:backup', async () => {
    try {
      const result = await scheduler.triggerBackup();
      return { success: true, data: { path: result } };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  // File operations
  ipcMain.handle('file:open-path', async (event, filePath) => {
    try {
      const { shell } = require('electron');
      await shell.openPath(filePath);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });

  ipcMain.handle('file:show-in-folder', async (event, filePath) => {
    try {
      const { shell } = require('electron');
      shell.showItemInFolder(filePath);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  });
}

// App event handlers
app.whenReady().then(async () => {
  await createWindow();
  
  app.on('activate', async () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      await createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  // Cleanup services
  if (scheduler) {
    scheduler.stop();
  }
  if (biometric) {
    biometric.stopEventServer();
  }

  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('before-quit', () => {
  // Cleanup services
  if (scheduler) {
    scheduler.stop();
  }
  if (biometric) {
    biometric.stopEventServer();
  }
});

// Handle certificate errors (for development)
app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
  if (process.env.NODE_ENV === 'development') {
    // In development, ignore certificate errors
    event.preventDefault();
    callback(true);
  } else {
    // In production, use default behavior
    callback(false);
  }
});
